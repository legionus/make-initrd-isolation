#!/bin/sh -efu

. shell-error
. shell-var
. shell-quote
. shell-git-config

isolate="@SBINDIR@/isolate"
configdir="@CONFIG@/isolate"

cfg="$configdir/config.ini"

show_help()
{
	cat <<-EOF
	Usage: $PROG [NAME ...]

	Options:
	   -V, --version   output version information and exit;
	   -h, --help      display this help and exit.

	Report bugs to authors.

	EOF
	exit
}

print_version()
{
	cat <<-EOF
	$PROG version @VERSION@
	Written by Alexey Gladkov.

	Copyright (C) 2018  Alexey Gladkov <gladkov.alexey@gmail.com>
	This is free software; see the source for copying conditions.  There is NO
	warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	EOF
	exit
}

show_usage()
{
	[ -z "$*" ] || message "$*"
	echo "Try \`$PROG --help' for more information." >&2
	exit 1
}

split_comma()
{
	local s IFS=', 	'
	while read s; do
		printf '%s\n' $s
	done
}

join_arg()
{
	local arg="$1"; shift
	local a res=
	for a; do
		res="$res,$a"
	done
	[ -z "${res#,}" ] || printf "%s=%s" "$arg" "${res#,}"
}

get_bool()
{
	local location rc=1 v
	for location; do
		git_config_location_exists "$cfg" "$location" ||
			continue
		git_config_get v "$cfg" "$location"
		shell_var_is_yes "$v" && rc=0 || rc=1
	done
	return $rc
}

TEMP=`getopt -n $PROG -o 'h,V' -l 'help,version' -- "$@"` ||
	show_usage
eval set -- "$TEMP"

while :; do
	case "$1" in
		-h|--help)
			show_help
			;;
		-V|--version)
			print_version
			;;
		--) shift
			break
			;;
		*)
			fatal "Unknown option: $1"
			;;
	esac
	shift
done

[ "$#" != 0 ] || show_usage

name="$1"; shift

[ -s "$cfg" ] ||
	fatal "config file not found: $cfg"

git_config_get cfg_lockdir "$cfg" "global.lockdir"
git_config_get cfg_cgroupsdir "$cfg" "global.cgroupsdir"

[ -n "$cfg_lockdir" ] || cfg_lockdir="/var/tmp"

cfg_verbose=
cfg_restart=
cfg_background=

! get_bool 'global.verbose' "isolate.$name.verbose" || cfg_verbose=1
! get_bool "isolate.$name.restart" || fg_restart=1
! get_bool "isolate.$name.background" || cfg_background=1

git_config_get cfg_rootdir  "$cfg" "isolate.$name.rootdir"
git_config_get cfg_uid      "$cfg" "isolate.$name.uid"
git_config_get cfg_gid      "$cfg" "isolate.$name.gid"
git_config_get cfg_init     "$cfg" "isolate.$name.init"
git_config_get cfg_hostname "$cfg" "isolate.$name.hostname"
git_config_get cfg_stdout   "$cfg" "isolate.$name.stdout"
git_config_get cfg_stdin    "$cfg" "isolate.$name.stdin"

cfg_cap_add="$(git_config_list "$cfg" "isolate.$name.cap-add" |split_comma)"
cfg_cap_drop="$(git_config_list "$cfg" "isolate.$name.cap-drop" |split_comma)"
cfg_unshare="$(git_config_list "$cfg" "isolate.$name.unshare" |split_comma)"
cfg_cgroup="$(git_config_list "$cfg" "isolate.$name.cgroup" |split_comma)"

if [ ! -d "$cfg_rootdir" ]; then
	printf "Isolation %s do not have root directory.\n" "$name"
	exit 1
fi

initenv=/.initrd/initenv
initargs=

if [ -s "$initenv" ]; then
	. "$initenv"
	read initargs < /.initrd/initargs
fi

# Expand variables
cfg_init="$(eval "echo \"$cfg_init\"")"

args=
args="$args --name='$name'"
args="$args --pidfile='$cfg_lockdir/$name/pid'"
args="$args ${cfg_verbose:+-v}"
args="$args ${cfg_cgroupsdir:+--cgroup-dir='$cfg_cgroupsdir'}"
args="$args ${cfg_uid:+--uid='$cfg_uid'}"
args="$args ${cfg_gid:+--gid='$cfg_gid'}"
args="$args ${cfg_hostname:+--hostname='$cfg_hostname'}"
args="$args $(join_arg --unshare  $cfg_unshare)"
args="$args $(join_arg --cap-drop $cfg_cap_drop)"
args="$args $(join_arg --cap-add  $cfg_cap_add)"
args="$args $(join_arg --cgroups  $cfg_cgroup)"

[ ! -f "$configdir/$name/fstab"   ] || args="$args --mount='$configdir/$name/fstab'"
[ ! -f "$configdir/$name/environ" ] || args="$args --environ='$configdir/$name/environ'"
[ ! -f "$configdir/$name/devices" ] || args="$args --devices='$configdir/$name/devices'"

quote_shell_args args "$args"
eval "set -- $args"

cd /

if ! mkdir -m700 "$cfg_lockdir/$name" >/dev/null 2>&1; then
	printf "Isolation %s is already running.\n" "$name"
	exit 1
fi

[ -z "$cfg_stdin" ] ||
	eval exec ${cfg_stdin:+<"$cfg_stdin"} ${cfg_stdout:+>"$cfg_stdout" 2>&1}

run()
{
	while :; do
		rc=0
		"$isolate" "$@" -- "$cfg_rootdir" ${cfg_init:-/bin/sh} || rc=$?

		[ -n "$cfg_restart" ] ||
			break
	done

	rm -rf -- "$cfg_lockdir/$name" >/dev/null 2>&1 ||:

	exit $rc
}

if [ -n "$cfg_background" ]; then
	run "$@" &
else
	run "$@"
fi
