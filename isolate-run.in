#!/bin/sh -efu

. shell-error
. shell-var
. shell-quote
. shell-git-config-env

isolate="@SBINDIR@/isolate"
configdir="@CONFDIR@/isolate"

show_help()
{
	cat <<-EOF
	Usage: $PROG [NAME ...]

	Options:
	   -V, --version   output version information and exit;
	   -h, --help      display this help and exit.

	Report bugs to authors.

	EOF
	exit
}

print_version()
{
	cat <<-EOF
	$PROG version @VERSION@
	Written by Alexey Gladkov.

	Copyright (C) 2018  Alexey Gladkov <gladkov.alexey@gmail.com>
	This is free software; see the source for copying conditions.  There is NO
	warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	EOF
	exit
}

show_usage()
{
	[ -z "$*" ] || message "$*"
	echo "Try \`$PROG --help' for more information." >&2
	exit 1
}

get_bool()
{
	local rc= value=
	get_var value "$2" "$3" "$4"
	echo value=$value
	if [ -n "$value" ]; then
		rc=no
		! shell_var_is_yes "$value" || rc=yes
	fi
	eval "$1=\$rc"
}

add_arg()
{
	local value=
	get_var value "$2" "$3" "$4" "${5-}"
	[ -z "$value" ] || args="$args $1='$value'"
}

TEMP=`getopt -n $PROG -o 'h,V' -l 'help,version' -- "$@"` ||
	show_usage
eval set -- "$TEMP"

while :; do
	case "$1" in
		-h|--help)
			show_help
			;;
		-V|--version)
			print_version
			;;
		--) shift
			break
			;;
		*)
			fatal "Unknown option: $1"
			;;
	esac
	shift
done

[ "$#" != 0 ] || show_usage

name="$1"; shift

[ -s "$configdir/config.ini" ] ||
	fatal "config file not found: $configdir/config.ini"

git_config_env "$configdir/config.ini"

exists=0
get_subsections_handler() { [ "$1" != "$name" ] || exists=1; }
get_subsections isolate
[ "$exists" = 1 ] ||
	fatal "subsection not found: $name"

lockdir="/var/tmp"
rootdir=

get_var lockdir "global" "" "lock-dir"
get_var rootdir "isolate" "$name" "root-dir"

if [ ! -d "$rootdir" ]; then
	printf "Isolation %s do not have root directory.\n" "$name"
	exit 1
fi

initenv=/.initrd/initenv
initargs=

if [ -s "$initenv" ]; then
	. "$initenv"
	read initargs < /.initrd/initargs
fi

# Expand variables
init=
get_var init "isolate" "$name" "init"
init="$(eval "printf '%s' \"${init:-/bin/sh}\"")"

args=
args="$args --name='$name'"
args="$args --pidfile='$lockdir/$name/pid'"

verbose=
get_bool verbose "isolate" "$name" "verbose"
[ -n "$verbose" ] || get_bool verbose "global" "" "verbose"
[ "$verbose" = yes ] && args="$args -v" ||:

bg=
get_bool bg "isolate" "$name" "background"
[ "$bg" = yes ] && args="$args --background" ||:

add_arg --cgroup-dir "global"  ""      "cgroups-dir"
add_arg --uid        "isolate" "$name" "uid"
add_arg --gid        "isolate" "$name" "gid"
add_arg --hostname   "isolate" "$name" "hostname"
add_arg --input      "isolate" "$name" "input"
add_arg --output     "isolate" "$name" "output"
add_arg --mount      "isolate" "$name" "fstab-file"
add_arg --environ    "isolate" "$name" "environ-file"
add_arg --devices    "isolate" "$name" "devices-file"
add_arg --unshare    "isolate" "$name" "unshare" "all=,"
add_arg --cap-drop   "isolate" "$name" "cap-drop" "all=,"
add_arg --cap-add    "isolate" "$name" "cap-add" "all=,"
add_arg --cgroups    "isolate" "$name" "cgroups" "all=,"

prerun_hook=
postrun_hook=

get_var prerun_hook  "isolate" "$name" "pre-run-hook"
get_var postrun_hook "isolate" "$name" "post-run-hook"

[ -z "$prerun_hook"  ] || export CONTAINER_HOOK_PRERUN="$prerun_hook"
[ -z "$postrun_hook" ] || export CONTAINER_HOOK_POSTRUN="$postrun_hook"

quote_shell_args args "$args"
eval "set -- $args"

exec "$isolate" "$@" -- "$rootdir" $init
