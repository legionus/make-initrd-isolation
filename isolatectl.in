#!/bin/sh -eu

. shell-error
. shell-git-config-env

isolate="@SBINDIR@/isolate-run"
configdir="@CONFDIR@/isolate"
lockdir="/var/tmp"

show_help()
{
	cat <<-EOF
	Usage: $PROG {start|stop|status|restart} [NAME ...]

	Options:
	   -V, --version   output version information and exit;
	   -h, --help      display this help and exit.

	Report bugs to authors.

	EOF
	exit
}

print_version()
{
	cat <<-EOF
	$PROG version @VERSION@
	Written by Alexey Gladkov.

	Copyright (C) 2018  Alexey Gladkov <gladkov.alexey@gmail.com>
	This is free software; see the source for copying conditions.  There is NO
	warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	EOF
	exit
}

show_usage()
{
	[ -z "$*" ] || message "$*"
	echo "Try \`$PROG --help' for more information." >&2
	exit 1
}

start()
{
	if status; then
		printf "Isolation %s is already running.\n" "$name"
		return 0
	fi

	mkdir -p -- "$lockdir/$name"

	"$isolate" "$name"
}

stop()
{
	local pid=

	if [ ! -f "$lockdir/$name/pid" ]; then
		printf "Isolation %s is not running.\n" "$name"
		return 1
	fi

	read pid < "$lockdir/$name/pid" ||:
	[ -z "$pid" ] ||
		kill -s TERM "$pid" >/dev/null 2>&1 ||:

	rm -rf -- "$lockdir/$name" >/dev/null 2>&1 ||:
}

status()
{
	local pid=

	[ -f "$lockdir/$name/pid" ] &&
		read pid < "$lockdir/$name/pid" &&
		kill -0 "$pid" >/dev/null 2>&1 ||
		return 1
}

TEMP=`getopt -n $PROG -o 'h,V' -l 'help,version' -- "$@"` ||
	show_usage
eval set -- "$TEMP"

while :; do
	case "$1" in
		-h|--help)
			show_help
			;;
		-V|--version)
			print_version
			;;
		--) shift
			break
			;;
		*)
			fatal "Unknown option: $1"
			;;
	esac
	shift
done

[ "$#" != 0 ] || show_usage
[ "$#" -ge 1 ] || show_usage "Error: more arguments required"

action="$1"; shift

git_config_env "$configdir/config.ini"

if [ "$#" = 0 ] && [ "$action" = "status" ]; then
	args=
	get_subsections_handler() { args="$args $1"; }
	get_subsections "isolate"
	set -- $args
fi

[ "$#" != 0 ] ||
	show_usage "Error: more arguments required"

get_var lockdir "global" "" "lock-dir"

rc=0
for name in "$@"; do
	case "$action" in
		start)
			start || rc=$?
			;;
		stop)
			stop || rc=$?
			;;
		restart)
			stop && start || rc=$?
			;;
		status)
			if status; then
				s=running
			else
				rc=1
				s=stopped
			fi
			printf "Isolation %s is %s.\n" "$name" "$s"
			;;
		*)
			show_usage "Error: unknown action: $action"
			;;
	esac
done

exit $rc
