#!/bin/sh -eu

. shell-error
. shell-var
. shell-quote
. shell-git-config-env

isolate="@SBINDIR@/isolate"
configdir="@CONFDIR@/isolate"
lockdir="/var/tmp"

show_help()
{
	cat <<-EOF
	Usage: $PROG {start|stop|status|restart} [NAME ...]

	Options:
	   -V, --version   output version information and exit;
	   -h, --help      display this help and exit.

	Report bugs to authors.

	EOF
	exit
}

print_version()
{
	cat <<-EOF
	$PROG version @VERSION@
	Written by Alexey Gladkov.

	Copyright (C) 2018  Alexey Gladkov <gladkov.alexey@gmail.com>
	This is free software; see the source for copying conditions.  There is NO
	warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	EOF
	exit
}

show_usage()
{
	[ -z "$*" ] || message "$*"
	echo "Try \`$PROG --help' for more information." >&2
	exit 1
}

get_bool()
{
	local rc= value=
	get_var value "$2" "$3" "$4"
	if [ -n "$value" ]; then
		rc=no
		! shell_var_is_yes "$value" || rc=yes
	fi
	eval "$1=\$rc"
}

add_arg()
{
	local value=
	get_var value "$2" "$3" "$4" "${5-}"
	if [ -n "$value" ]; then
		eval "value=\"$value\""
		args="$args $1='$value'"
	fi
}

start()
{
	if status; then
		printf "Isolation %s is already running.\n" "$name"
		return 0
	fi

	mkdir -p -- "$lockdir/$name"

	local rootdir=
	get_var rootdir "isolate" "$name" "root-dir"

	if [ ! -d "$rootdir" ]; then
		printf "Isolation %s do not have root directory.\n" "$name"
		return 1
	fi

	local AUDIT_ARCH=empty
	case "$(uname -m)" in
		x86_64)
			AUDIT_ARCH=x86_64
			;;
	esac

	local init=
	get_var init "isolate" "$name" "init"
	eval "init=\"${init:-/bin/sh}\""

	local args=
	args="$args --name='$name'"
	args="$args --pidfile='$lockdir/$name/pid'"

	local verbose=
	get_bool verbose "isolate" "$name" "verbose"
	[ -n "$verbose" ] || get_bool verbose "global" "" "verbose"
	[ "$verbose" = yes ] && args="$args -v" ||:

	local bg=
	get_bool bg "isolate" "$name" "background"
	[ "$bg" = yes ] && args="$args --background" ||:

	add_arg --cgroup-dir "global"  ""      "cgroups-dir"
	add_arg --uid        "isolate" "$name" "uid"
	add_arg --gid        "isolate" "$name" "gid"
	add_arg --hostname   "isolate" "$name" "hostname"
	add_arg --input      "isolate" "$name" "input"
	add_arg --output     "isolate" "$name" "output"
	add_arg --mount      "isolate" "$name" "fstab-file"
	add_arg --environ    "isolate" "$name" "environ-file"
	add_arg --devices    "isolate" "$name" "devices-file"
	add_arg --seccomp    "isolate" "$name" "seccomp-file"
	add_arg --unshare    "isolate" "$name" "unshare" "all=,"
	add_arg --cap-drop   "isolate" "$name" "cap-drop" "all=,"
	add_arg --cap-add    "isolate" "$name" "cap-add" "all=,"
	add_arg --cgroups    "isolate" "$name" "cgroups" "all=,"

	local prerun_hook=
	local postrun_hook=

	get_var prerun_hook  "isolate" "$name" "pre-run-hook"
	get_var postrun_hook "isolate" "$name" "post-run-hook"

	quote_shell_args args "$args"
	(
		eval "set -- $args"

		[ -z "$prerun_hook"  ] || export CONTAINER_HOOK_PRERUN="$prerun_hook"
		[ -z "$postrun_hook" ] || export CONTAINER_HOOK_POSTRUN="$postrun_hook"

		exec "$isolate" "$@" -- "$rootdir" $init
	)
}

stop()
{
	local pid=

	if [ ! -f "$lockdir/$name/pid" ]; then
		printf "Isolation %s is not running.\n" "$name"
		return 1
	fi

	read pid < "$lockdir/$name/pid" ||:
	[ -z "$pid" ] ||
		kill -s TERM "$pid" >/dev/null 2>&1 ||:

	rm -rf -- "$lockdir/$name" >/dev/null 2>&1 ||:
}

status()
{
	local pid=

	[ -f "$lockdir/$name/pid" ] &&
		read pid < "$lockdir/$name/pid" &&
		kill -0 "$pid" >/dev/null 2>&1 ||
		return 1
}

TEMP=`getopt -n $PROG -o 'h,V' -l 'help,version' -- "$@"` ||
	show_usage
eval set -- "$TEMP"

while :; do
	case "$1" in
		-h|--help)
			show_help
			;;
		-V|--version)
			print_version
			;;
		--) shift
			break
			;;
		*)
			fatal "Unknown option: $1"
			;;
	esac
	shift
done

[ "$#" != 0 ] || show_usage
[ "$#" -ge 1 ] || show_usage "Error: more arguments required"

action="$1"; shift

git_config_env "$configdir/config.ini"

if [ "$#" = 0 ] && [ "$action" = "status" ]; then
	args=
	get_subsections_handler() { args="$args $1"; }
	get_subsections "isolate"
	set -- $args
fi

[ "$#" != 0 ] ||
	show_usage "Error: more arguments required"

initenv=/.initrd/initenv
initargs=

if [ -s "$initenv" ]; then
	. "$initenv"
	read initargs < /.initrd/initargs
fi

get_var lockdir "global" "" "lock-dir"

rc=0
for name in "$@"; do
	case "$action" in
		start)
			start || rc=$?
			;;
		stop)
			stop || rc=$?
			;;
		restart)
			stop && start || rc=$?
			;;
		status)
			if status; then
				s=running
			else
				rc=1
				s=stopped
			fi
			printf "Isolation %s is %s.\n" "$name" "$s"
			;;
		*)
			show_usage "Error: unknown action: $action"
			;;
	esac
done

exit $rc
